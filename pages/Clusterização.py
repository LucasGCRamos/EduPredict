import streamlit as st
import pandas as pd
import plotly.express as px # type: ignore

# T√≠tulo da p√°gina
st.markdown("<h1 style='text-align: center;'>Desvendando Perfis de Estudantes</h1>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center;'>Insights Atrav√©s de Clusters üí°</h3>", unsafe_allow_html=True)

# Carregar o dataset
df = pd.read_parquet('pisi3_database/predict_dropout_pt.parquet')

# Criar abas
tab1, tab2, tab3 = st.tabs(["Escolha dos Clusters", "Insights", "Perfis"])

# Aba 1: Escolha dos Clusters
with tab1:
    st.header("Escolha dos Clusters ü´Ç")
    st.write("An√°lise para determinar o n√∫mero ideal de clusters para o conjunto de dados")

    # M√©todo do Cotovelo
    st.subheader("M√©todo do Cotovelo")
    st.image("images/metodoCotovelo.png", caption="M√©todo do Cotovelo para escolha do n√∫mero de clusters.")
    st.write("""
    O **m√©todo do cotovelo** ajuda a identificar o n√∫mero de clusters que melhor representam os dados.
    O ponto onde a curva forma um "cotovelo" indica o n√∫mero ideal de clusters.
    """)

    # Coeficiente da Silhueta
    st.subheader("Gr√°fico da Silhueta")
    st.image("images/coefSilhueta.png", caption="Coeficiente da Silhueta para avalia√ß√£o da qualidade dos clusters.")
    st.write("""
    O **Coeficiente da Silhueta** √© uma m√©trica usada para avaliar a qualidade dos clusters. Ele mede qu√£o bem cada ponto de dados se encaixa em seu cluster.
    O n√∫mero ideal de clusters √© aquele que maximiza o coeficiente m√©dio da silhueta.
    Para este conjunto de dados foram feitos testes com 2,3 e 4 clusters. 
    A configura√ß√£o com 3 clusters apresentou uma maior m√©dia de silhueta e pontos melhor distribuidos.
    """)
    

# Aba 2: Insights
with tab2:
    st.header("Insights dos Clusters")

    # Heatmaps
    st.subheader("Mapas de Calor")
    colunas_heatmap = ["Qualifica√ß√£o da m√£e", "Qualifica√ß√£o do pai"]
    for column in colunas_heatmap:
        df_counts = df.groupby(["Cluster", column]).size().reset_index(name="Quantidade")
        fig = px.density_heatmap(
            df_counts,
            x="Cluster",
            y=column,
            z="Quantidade",
            text_auto=True,
            title=f"Mapa de Calor da {column} por Cluster",
            labels={"Quantidade": "N√∫mero de Amostras", "Cluster": "Cluster"},
            color_continuous_scale="Blues"
        )
        st.plotly_chart(fig)
    st.write("""
            **Insight para qualifica√ß√£o dos pais:**
            - O **Cluster 0** possui maior distribui√ß√£o de pais com maior grau de ensino.
            - No **Cluster 1** alunos com pais que tiveream menor grau de ensino possuem tendencia de pertencer a este cluster.
            - O **Cluster 2**, tem maior distribui√ß√£o de pais que completaram ensino m√©dio ou fundamental.
             """)

    # Gr√°ficos de barras para colunas bin√°rias
    st.subheader("Distribui√ß√£o de Vari√°veis Bin√°rias por Cluster")
    colunas_binarias = ['Devedor', 'Bolsista', 'Mensalidade em dia']
    for column in colunas_binarias:
        df_counts = df.groupby(["Cluster", column]).size().reset_index(name="Contagem")
        fig = px.bar(
            df_counts,
            x=column,
            y='Contagem',
            color="Cluster",
            barmode="group",
            title=f"Distribui√ß√£o de {column} por Cluster"
        )
        st.plotly_chart(fig)
    st.write("""
            **Insight para condi√ß√µes econ√¥micas:**
            - O **Cluster 0** possui uma maior quantidade de n√£o devedores, com as mensalidades em dia e n√£o bolsista.
            - O **Cluster 1** tem uma menor quantidade de n√£o devedores e tamb√©m com menos mensalidades em dia.
            - No **Cluster 2**, tem um meio termo na quantidade de devedores, mensalidades em dia e com maior quantidade de bolsistas.  
            """)

    # Gr√°ficos de barras para colunas categ√≥ricas
    st.subheader("Distribui√ß√£o de Vari√°veis Categ√≥ricas por Cluster")

   
    colunas_categoricas = ['Estado civil', 'Faixa et√°ria']
    for column in colunas_categoricas:
        df_counts = df.groupby(["Cluster", column]).size().reset_index(name="Contagem")
        fig = px.bar(
            df_counts,
            x='Contagem',
            y=column,
            color="Cluster",
            barmode="group",
            title=f"Distribui√ß√£o de {column} por Cluster"
        )
        st.plotly_chart(fig)
    st.write("""
    **Insight para Faixa Et√°ria e Estado C√≠vil:**
    - O **Cluster 0** √© predominantemente composto por estudantes jovens entre 18-27 anos e solteiros.
    - O **Cluster 1** tem uma distribui√ß√£o maior a partir dos 28 anos em rela√ß√£o aos outros clusters, tamb√©m possui alta distribui√ß√£o entre os casados e solteiros.
    - No **Cluster 2** tamb√©m tem propor√ß√£o maior de estudantes na faixa de 18-27 anos e solteiros.
    - Divorciados e vi√∫vos n√£o tem tanto impacto na forma√ß√£o dos clusters.
    """)


with tab3:
    st.header("Explore os Clusters")

    # Filtros interativos
    st.subheader("Filtros")
    faixa_etaria = st.selectbox("Faixa et√°ria", ["Todas", "18-27 anos", "28-37 anos", "38-47 anos", "48-57 anos", "58-62 anos"])
    estado_civil = st.selectbox("Estado civil", ["Todos", "Solteiro", "Casado", "Divorciado", "Vi√∫vo"])
    qualificacao_mae = st.selectbox("Qualifica√ß√£o da m√£e", ["Todas", "Ensino Secund√°rio - 12.¬∫ Ano", "Ensino Superior - Bacharelado", "Ensino B√°sico 3¬∫ Ciclo", "Desconhecido", "Ensino b√°sico 1¬∫ ciclo", "Ensino B√°sico 2.¬∫ Ciclo", "Outro", "Ensino superior - Licenciatura", "Ensino superior - Mestrado"])
    qualificacao_pai = st.selectbox("Qualifica√ß√£o do pai", ["Todas", "Ensino Secund√°rio - 12.¬∫ Ano", "Ensino Superior - Bacharelado", "Ensino B√°sico 3¬∫ Ciclo", "Desconhecido", "Ensino b√°sico 1¬∫ ciclo", "Ensino B√°sico 2.¬∫ Ciclo", "Outro", "Ensino superior - Licenciatura", "Ensino superior - Mestrado"])
    devedor = st.selectbox("√â devedor?", ["Todos", "Sim", "N√£o"])
    bolsista = st.selectbox("√â bolsista?", ["Todos", "Sim", "N√£o"])

    # Aplicar filtros
    filtered_df = df.copy()
    if faixa_etaria != "Todas":
        filtered_df = filtered_df[filtered_df["Faixa et√°ria"] == faixa_etaria]
    if estado_civil != "Todos":
        filtered_df = filtered_df[filtered_df["Estado civil"] == estado_civil]
    if qualificacao_mae != "Todas":
        filtered_df = filtered_df[filtered_df["Qualifica√ß√£o da m√£e"] == qualificacao_mae]
    if qualificacao_pai != "Todas":
        filtered_df = filtered_df[filtered_df["Qualifica√ß√£o do pai"] == qualificacao_pai]
    if devedor != "Todos":
        filtered_df = filtered_df[filtered_df["Devedor"] == devedor]
    if bolsista != "Todos":
        filtered_df = filtered_df[filtered_df["Bolsista"] == bolsista]

    # Exibir distribui√ß√£o dos clusters
    st.subheader("Distribui√ß√£o dos Clusters")

    if not filtered_df.empty:
        cluster_counts = filtered_df["Cluster"].value_counts().reset_index()
        cluster_counts.columns = ["Cluster", "Quantidade"]

        # Gr√°fico de barras
        fig = px.bar(
            cluster_counts,
            x="Cluster",
            y="Quantidade",
            title="Distribui√ß√£o dos Clusters",
            labels={"Quantidade": "N√∫mero de Estudantes", "Cluster": "Cluster"},
            color="Cluster",
            text_auto=True
        )
        st.plotly_chart(fig)

        # Descri√ß√£o dos clusters
        st.subheader("Descri√ß√£o dos Clusters")
        cluster_descriptions = {
            0: """üßë‚Äçüéì Jovens abastados 

        - Caracteristicas:
        - Pais com maior grau de ensino  
        - N√£o devedor  
        - Mensalidades em dia  
        - N√£o bolsista  
        - Jovens entre 18-27 anos  
        - Solteiros  
        """,
            1: """üßë‚Äçüè´ Experientes com pouco dinheiro
        
        - Caracteristicas:
        - Pais com menor grau de ensino  
        - Menor quantidade de n√£o devedores  
        - Menos mensalidades em dia  
        - A partir dos 28 anos  
        - Casados ou solteiros  
        """,
            2: """üéì Bolsistas meio termo 

        - Caracteristicas:
        - Pais que completaram ensino m√©dio ou fundamental  
        - Bolsistas  
        - Jovens entre 18-27 anos  
        - Solteiros  
        """
        }
        for cluster, desc in cluster_descriptions.items():
            st.write(f"**Cluster {cluster}:** {desc}")
    else:
        st.warning("Nenhum dado encontrado com os filtros selecionados.")